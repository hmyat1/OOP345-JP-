/*/////////////////////////////////////////////////////////////////////////
                       Workshop - 5
Full Name  :Hla Myint Myat 
Student ID#:185923216
Email      :hmyat1@myseneca.ca
Section    :NFF

Authenticity Declaration:
I declare that this submission is the result of my own work and I only copied
the code that my professor provided to complete my workshops and assignments. 
This submitted piece of work has not been shared with any other student or 3rd party content provider.
 /////////////////////////////////////////////////////////////////////////*/


In this workshop, I picked up some crucial basics of C++ programming that are super useful for creating and managing software effectively.

One big takeaway was understanding the difference between functors and lambda expressions. Functors are objects that act like functions, typically made by overloading the "operator()". They’re great for tasks where you need to keep track of information across multiple calls, like a spell checker that keeps stats on word corrections. On the flip side, lambda expressions are a quick way to write small, inline functions without creating a separate class. They’re perfect for short tasks where you don’t need to manage state.

We also dove into exception handling. For example, in the "SpellChecker" class, the constructor throws an exception if it can’t open a file. Exceptions make it clear when something goes wrong and separate error handling from regular code. But you can also use return codes or optional types to handle errors, which might make the code simpler sometimes. This showed me the pros and cons of different error-handling methods: exceptions keep the code cleaner by separating normal and error paths, while return codes can simplify control flow in straightforward situations.

We also focused on cutting down on code duplication, especially in the "Movie" and "Book" classes, which had similar code for loading data from files. To make the code easier to maintain, I used a common base class or a templated function for shared functionality. This way, we centralize the shared logic but still keep the individual classes clear and flexible.

Another topic was whether the "Movie" and "Book" classes needed default constructors. Default constructors are useful when you need to create objects without setting them up right away or when working with collections of objects. But if objects always need to be initialized with data when created, default constructors aren’t necessary and can be left out to ensure objects are always meaningfully initialized.

Overall, this workshop gave me practical insights into good C++ programming practices, like proper class design, effective error handling, and choosing the right type of callable entities based on what the application needs. These concepts are key for writing maintainable, efficient, and functional C++ code.







/*/////////////////////////////////////////////////////////////////////////
                       Workshop - 9 
Full Name  :Hla Myint Myat 
Student ID#:185923216
Email      :hmyat1@myseneca.ca
Section    :NFF

Authenticity Declaration:
I declare that this submission is the result of my own work and I only copied
the code that my professor provided to complete my workshops and assignments. 
This submitted piece of work has not been shared with any other student or 3rd party content provider.
 /////////////////////////////////////////////////////////////////////////*/


was there any benefit from using binary files in this workshop?

Answer: Yes, using binary files was beneficial in this workshop. Storing 50,000 integers in a binary format made the file size much smaller and more efficient. This method saved space that would have otherwise been taken up by field separators. Additionally, reading and writing operations were faster because fewer processes were involved. Using binary files also improved data integrity when performing read and write operations across different operating systems and compilers.

why would be important to bind a function to its arguments, and how was it useful in this workshop

Answer: Binding a function to its arguments is important for effectively passing multiple parameters, especially when using functions like computeAvgFactor and computeVarFactor in a multi-threaded environment. In this workshop, we used the std::bind function to create callable objects for each thread. These objects included the target function (such as computeAvgFactor or computeVarFactor) and specific arguments like the data array, partition size, and other necessary parameters. This approach provided a clean and organized way to pass these parameters to the threads during their creation, making the computation of average and variance in a multi-threaded context more streamlined.

the advantages of using multiple threads, and how did you accomplished multi-threading in this workshop

Answer: Using multiple threads allows for the efficient use of multi-core processors, speeding up program execution. In this workshop, we achieved multi-threading with the std::thread feature from the C++ Standard Library. We used the std::bind function to bind arguments to functions, creating callable objects. These objects were then used to launch threads, enabling parallel execution and taking full advantage of multi-threading benefits.


